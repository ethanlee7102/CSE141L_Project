# Registers:
# R0 :  0   - Outer loop index (i)
# R1 :  0   - Inner loop index (j)
# R2 : 32   - Value at index i
# R3 :  0   - Value at index j
# R4 :  1   - Hamming distance
# R5 : 16   - Minimum Hamming distance
# R6 :  0   - Maximum Hamming distance
# R7 : 32   - Temporary register for calculations and memory addresses

# Constants
# Initialize minimum distance to 16 (R5 = 16) R6 is already 0.
ADDI 3, R5      # R5 = 3
ADD R5, R5      # R5 = 6
ADD R5, R5      # R5 = 12
ADDI 3, R5      # R5 = 15
ADDI 1, R5      # R5 = 16
# ADDI 0, R6
ADDI 3, R7      # R7 = 3
ADDI 1, R7      # R7 = 4
ADD R7, R7      # R7 = 8
ADD R7, R7      # R7 = 16
ADD R7, R7      # R7 = 32
# Outer loop: for (int i = 0; i < 32; i++) 1st pair
ADDI 0, R0
ADDI R7, R0     # R0 = 0 + 32 = 32
ADDI 1, R4      # R4 = 1
SUB R4, R2      # R2 = R2 - R4 -> 32 - 1, -1, -1...
BZ 0, R2        # Branch if equal to zero
LD R0, R2       # load value at index i r2 = datamem[r0 (i)]
                # r2 should have value of line 0 at this point
ADDI 1, R0      # increment r0 for j
LD R0, R3       # r3 should have value of line 1 at this point
# Inner loop: for (int j = i + 1; j < 32; j++) 2nd pair
ADD R7, R3      # R3 = 0 + 32 = 32
ADDI 1, R4      # R4 = 1
SUB R4, R3      # R3 = R3 - R4 -> 32 - 1, -1, -1...
BZ 1, R2        # Branch if equal to zero
# ADDI 0, R1
LD R3, R7      # Load value at index j r7 = datamem[r3]
# loop for 8 bits:?
XOR R7, R2      # saves xor result into r2
ADD R7, R0  
SR R4, R2
BZ 2, R4
ADD R4, R7
SUB R7, R4
BZ 3, R7
ADD R5, R4
SUB R7, R4
ADD R7, R7
ADD R6, R4
ADDI 1, R1
ADDI 1, R0
BZ 0, R0